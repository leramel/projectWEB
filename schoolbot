from datetime import datetime as dt
from telegram import ReplyKeyboardMarkup
from telegram.ext import CommandHandler, Application, MessageHandler, filters
from config import BOT_TOKEN



naim = {'Борщ - 30р':  30, 'Макароны - 35р': 35, 'Сосиска - 45р': 45, 'Компот - 20р': 20,
        'С фрикадельками - 32р': 32, 'Пюре - 27р': 27, 'Котлета куриная - 56р': 56,
        'Гороховый - 28р': 28, 'Гречка - 22р': 22, 'Котлета мясная - 72р': 72,
        'Суп-лапша - 27р': 27, 'Рис - 25р': 25, 'Рыба - 36р': 36,
        'Рассольник - 40р': 40, 'Плов - 60р': 60,
        'Хлеб - 5р': 5, 'Сок - 35р': 35, 'Шоколадка - 50р': 50, 'Яблоко - 20р': 20,
        'Булка с сыром - 22р': 22, 'Сосиска в тесте - 35р': 35, 'Пицца - 45р': 45, 'Булка с маком - 35р': 35, 'Слойка с сыром и ветчиной - 50': 50}


Monday = ['Борщ - 30р', 'Макароны - 35р', 'Сосиска - 45р', 'Компот - 20р']
Tuesday = ['С фрикадельками - 32р', 'Пюре - 27р', 'Котлета куриная - 56р', 'Компот - 20 р']
Wednesday = ['Гороховый - 28р', 'Гречка - 22р', 'Котлета мясная - 72р', 'Компот - 20р']
Thursday = ['Суп-лапша - 27р', 'Рис - 25р', 'Рыба - 36р', 'Компот - 20р']
Friday = ['Рассольник - 40р', 'Плов - 60р', 'Компот - 20р']
dop = ['Хлеб - 5р', 'Сок - 35р', 'Шоколадка - 50р', 'Яблоко - 20р']
bakery_menu = ['Булка с сыром - 22р', 'Сосиска в тесте - 35р', 'Пицца - 45р', 'Булка с маком - 35р', 'Слойка с сыром и ветчиной - 50р']

days = [Monday, Tuesday, Wednesday, Thursday, Friday, Monday, Monday]
today = days[dt.today().weekday()]

reply_keyboard = [today,
                  dop, bakery_menu, ['Хватит']]
reply_keyboard2 = [['/help', '/menu'], ['/additionally', '/bakery']]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
markup2 = ReplyKeyboardMarkup(reply_keyboard2, one_time_keyboard=False)

class Order():
    def __init__(self):
        self.order_list = []
        self.money = 0

ord = Order()

async def start(update, context):
    """Отправляет сообщение когда получена команда /start"""
    await update.message.reply_text("Привет! Это наш бот! Для того, чтоб узнать всю информацию напиши '/help'", reply_markup=markup2)


async def help(update, context):
    """Отправляет сообщение когда получена команда /help"""
    await update.message.reply_text("""Привет. Здесь ты можешь узнать меню на сегодня, написав '/menu', можно посмотреть дополнительные продукты - '/additionally' и выпечку - '/bakery'. Сделать заказ, написав '/order', а после, с помощью предложенных кнопок, выбрать продукты""")


async def menu(update, context):
    await update.message.reply_text(f"В меню: {', '.join(today)}")


async def additionally(update, context):
    await update.message.reply_text(f"Дополнительно: {', '.join(dop)}")


async def bakery(update, context):
    await update.message.reply_text(f"Выпечка: {', '.join(bakery_menu)}")


async def order(update, context):
    await update.message.reply_text('Записываю', reply_markup=markup)
    if update.message.text != 'Хватит':
        ord.order_list.append(update.message.text)
        if update.message.text != '/order':
            ord.money += naim[update.message.text]
    elif update.message.text == 'Хватит':
        await update.message.reply_text('Чтобы напечатать чек напишите "/check"')
    else:
        await update.message.reply_text('Воспользуйтесь помощью /help, я Вас не понимаю')


async def check(update, context):
    if ord.money == 0:
        await update.message.reply_text('Вы ничего не добавили в заказ')
    else:
        if '/order' in ord.order_list:
            ord.order_list.remove('/order')
        await update.message.reply_text('==== ВАШ ЗАКАЗ ====')
        for k in ord.order_list:
            await update.message.reply_text(k)
        await update.message.reply_text(f'Итого: {ord.money}p')
        await update.message.reply_text('===================')
        await update.message.reply_text('Спасибо за заказ!')
        ord.order_list = []
        ord.money = 0


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, order)

    # Регистрируем обработчик в приложении.
    application.add_handler(text_handler)
    application.add_handler(CommandHandler("order", order))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("additionally", additionally))
    application.add_handler(CommandHandler("bakery", bakery))
    application.add_handler(CommandHandler("check", check))
    # Запускаем приложение.
    application.run_polling()


# Запускаем функцию main() в случае запуска скрипта.
if __name__ == '__main__':
    main()
